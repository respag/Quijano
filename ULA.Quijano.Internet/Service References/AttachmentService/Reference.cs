//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ULA.Quijano.Internet.AttachmentService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AttachmentService.IAttachmentService")]
    public interface IAttachmentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttachmentService/UploadFile", ReplyAction="http://tempuri.org/IAttachmentService/UploadFileResponse")]
        bool UploadFile(string processName, string incident, string step, string fileName, byte[] fileData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttachmentService/UploadFile", ReplyAction="http://tempuri.org/IAttachmentService/UploadFileResponse")]
        System.Threading.Tasks.Task<bool> UploadFileAsync(string processName, string incident, string step, string fileName, byte[] fileData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttachmentService/GetFileList", ReplyAction="http://tempuri.org/IAttachmentService/GetFileListResponse")]
        string[] GetFileList(string processName, string incident, string step);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttachmentService/GetFileList", ReplyAction="http://tempuri.org/IAttachmentService/GetFileListResponse")]
        System.Threading.Tasks.Task<string[]> GetFileListAsync(string processName, string incident, string step);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttachmentService/GetFile", ReplyAction="http://tempuri.org/IAttachmentService/GetFileResponse")]
        byte[] GetFile(string processName, string incident, string step, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttachmentService/GetFile", ReplyAction="http://tempuri.org/IAttachmentService/GetFileResponse")]
        System.Threading.Tasks.Task<byte[]> GetFileAsync(string processName, string incident, string step, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttachmentService/DeleteFile", ReplyAction="http://tempuri.org/IAttachmentService/DeleteFileResponse")]
        bool DeleteFile(string processName, string incident, string step, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttachmentService/DeleteFile", ReplyAction="http://tempuri.org/IAttachmentService/DeleteFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteFileAsync(string processName, string incident, string step, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttachmentService/MoveFiles", ReplyAction="http://tempuri.org/IAttachmentService/MoveFilesResponse")]
        bool MoveFiles(string processName, string sourceIncident, string targetIncident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttachmentService/MoveFiles", ReplyAction="http://tempuri.org/IAttachmentService/MoveFilesResponse")]
        System.Threading.Tasks.Task<bool> MoveFilesAsync(string processName, string sourceIncident, string targetIncident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttachmentService/DeleteFiles", ReplyAction="http://tempuri.org/IAttachmentService/DeleteFilesResponse")]
        bool DeleteFiles(string processName, string tmpDirectory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttachmentService/DeleteFiles", ReplyAction="http://tempuri.org/IAttachmentService/DeleteFilesResponse")]
        System.Threading.Tasks.Task<bool> DeleteFilesAsync(string processName, string tmpDirectory);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAttachmentServiceChannel : ULA.Quijano.Internet.AttachmentService.IAttachmentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AttachmentServiceClient : System.ServiceModel.ClientBase<ULA.Quijano.Internet.AttachmentService.IAttachmentService>, ULA.Quijano.Internet.AttachmentService.IAttachmentService {
        
        public AttachmentServiceClient() {
        }
        
        public AttachmentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AttachmentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AttachmentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AttachmentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool UploadFile(string processName, string incident, string step, string fileName, byte[] fileData) {
            return base.Channel.UploadFile(processName, incident, step, fileName, fileData);
        }
        
        public System.Threading.Tasks.Task<bool> UploadFileAsync(string processName, string incident, string step, string fileName, byte[] fileData) {
            return base.Channel.UploadFileAsync(processName, incident, step, fileName, fileData);
        }
        
        public string[] GetFileList(string processName, string incident, string step) {
            return base.Channel.GetFileList(processName, incident, step);
        }
        
        public System.Threading.Tasks.Task<string[]> GetFileListAsync(string processName, string incident, string step) {
            return base.Channel.GetFileListAsync(processName, incident, step);
        }
        
        public byte[] GetFile(string processName, string incident, string step, string fileName) {
            return base.Channel.GetFile(processName, incident, step, fileName);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetFileAsync(string processName, string incident, string step, string fileName) {
            return base.Channel.GetFileAsync(processName, incident, step, fileName);
        }
        
        public bool DeleteFile(string processName, string incident, string step, string fileName) {
            return base.Channel.DeleteFile(processName, incident, step, fileName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFileAsync(string processName, string incident, string step, string fileName) {
            return base.Channel.DeleteFileAsync(processName, incident, step, fileName);
        }
        
        public bool MoveFiles(string processName, string sourceIncident, string targetIncident) {
            return base.Channel.MoveFiles(processName, sourceIncident, targetIncident);
        }
        
        public System.Threading.Tasks.Task<bool> MoveFilesAsync(string processName, string sourceIncident, string targetIncident) {
            return base.Channel.MoveFilesAsync(processName, sourceIncident, targetIncident);
        }
        
        public bool DeleteFiles(string processName, string tmpDirectory) {
            return base.Channel.DeleteFiles(processName, tmpDirectory);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFilesAsync(string processName, string tmpDirectory) {
            return base.Channel.DeleteFilesAsync(processName, tmpDirectory);
        }
    }
}
